[
  {
    "value": "spark.app.name",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.driver.cores",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.driver.maxResultSize",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.driver.memory",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.executor.memory",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.extraListeners",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.local.dir",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.logConf",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.master",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.submit.deployMode",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.log.callerContext",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.driver.supervise",
    "data": {
      "category": "Application Properties"
    }
  },
  {
    "value": "spark.driver.extraClassPath",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.driver.extraJavaOptions",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.driver.extraLibraryPath",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.driver.userClassPathFirst",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.extraClassPath",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.extraJavaOptions",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.extraLibraryPath",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.logs.rolling.maxRetainedFiles",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.logs.rolling.enableCompression",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.logs.rolling.maxSize",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.logs.rolling.strategy",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.logs.rolling.time.interval",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executor.userClassPathFirst",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.executorEnv.[EnvironmentVariableName]",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.redaction.regex",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.python.profile",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.python.profile.dump",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.python.worker.memory",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.python.worker.reuse",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.files",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.submit.pyFiles",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.jars",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.jars.packages",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.jars.excludes",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.jars.ivy",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.jars.ivySettings",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.pyspark.driver.python",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.pyspark.python",
    "data": {
      "category": "Runtime Environment"
    }
  },
  {
    "value": "spark.reducer.maxSizeInFlight",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.reducer.maxReqsInFlight",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.reducer.maxBlocksInFlightPerAddress",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.reducer.maxReqSizeShuffleToMem",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.compress",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.file.buffer",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.io.maxRetries",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.io.numConnectionsPerPeer",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.io.preferDirectBufs",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.io.retryWait",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.service.enabled",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.service.port",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.service.index.cache.entries",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.sort.bypassMergeThreshold",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.spill.compress",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.shuffle.accurateBlockThreshold",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.io.encryption.enabled",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.io.encryption.keySizeBits",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.io.encryption.keygen.algorithm",
    "data": {
      "category": "Shuffle Behavior"
    }
  },
  {
    "value": "spark.eventLog.compress",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.eventLog.dir",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.eventLog.enabled",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.enabled",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.killEnabled",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.port",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.retainedJobs",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.retainedStages",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.retainedTasks",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.reverseProxy",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.reverseProxyUrl",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.showConsoleProgress",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.worker.ui.retainedExecutors",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.worker.ui.retainedDrivers",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.sql.ui.retainedExecutions",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.streaming.ui.retainedBatches",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.ui.retainedDeadExecutors",
    "data": {
      "category": "Spark UI"
    }
  },
  {
    "value": "spark.broadcast.compress",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.io.compression.codec",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.io.compression.lz4.blockSize",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.io.compression.snappy.blockSize",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryo.classesToRegister",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryo.referenceTracking",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryo.registrationRequired",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryo.registrator",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryo.unsafe",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryoserializer.buffer.max",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.kryoserializer.buffer",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.rdd.compress",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.serializer",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.serializer.objectStreamReset",
    "data": {
      "category": "Compression and Serialization "
    }
  },
  {
    "value": "spark.memory.fraction",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.memory.storageFraction",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.memory.offHeap.enabled",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.memory.offHeap.size",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.memory.useLegacyMode",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.shuffle.memoryFraction",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.storage.memoryFraction",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.storage.unrollFraction",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.storage.replication.proactive",
    "data": {
      "category": "Memory Management "
    }
  },
  {
    "value": "spark.broadcast.blockSize",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.executor.cores",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.default.parallelism",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.executor.heartbeatInterval",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.files.fetchTimeout",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.files.useFetchCache",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.files.overwrite",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.files.maxPartitionBytes",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.files.openCostInBytes",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.hadoop.cloneConf",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.hadoop.validateOutputSpecs",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.storage.memoryMapThreshold",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version",
    "data": {
      "category": "Execution Behavior "
    }
  },
  {
    "value": "spark.rpc.message.maxSize",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.blockManager.port",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.driver.blockManager.port",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.driver.bindAddress",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.driver.host",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.driver.port",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.network.timeout",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.port.maxRetries",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.rpc.numRetries",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.rpc.retry.wait",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.rpc.askTimeout",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.rpc.lookupTimeout",
    "data": {
      "category": "Networking "
    }
  },
  {
    "value": "spark.cores.max",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.locality.wait",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.locality.wait.node",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.locality.wait.process",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.locality.wait.rack",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.scheduler.maxRegisteredResourcesWaitingTime",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.scheduler.minRegisteredResourcesRatio",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.scheduler.mode",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.scheduler.revive.interval",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.enabled",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.timeout",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.task.maxTaskAttemptsPerExecutor",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.task.maxTaskAttemptsPerNode",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.stage.maxFailedTasksPerExecutor",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.stage.maxFailedExecutorsPerNode",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.application.maxFailedTasksPerExecutor",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.application.maxFailedExecutorsPerNode",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.blacklist.killBlacklistedExecutors",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.speculation",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.speculation.interval",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.speculation.multiplier",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.speculation.quantile",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.task.cpus",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.task.maxFailures",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.task.reaper.enabled",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.task.reaper.pollingInterval",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.task.reaper.threadDump",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.task.reaper.killTimeout",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.stage.maxConsecutiveAttempts",
    "data": {
      "category": "Scheduling"
    }
  },
  {
    "value": "spark.dynamicAllocation.enabled",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.executorIdleTimeout",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.cachedExecutorIdleTimeout",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.initialExecutors",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.maxExecutors",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.minExecutors",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.schedulerBacklogTimeout",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.dynamicAllocation.sustainedSchedulerBacklogTimeout",
    "data": {
      "category": "Dynamic Allocation "
    }
  },
  {
    "value": "spark.acls.enable",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.admin.acls",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.admin.acls.groups",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.user.groups.mapping",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.authenticate",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.authenticate.secret",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.network.crypto.enabled",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.network.crypto.keyLength",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.network.crypto.keyFactoryAlgorithm",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.network.crypto.saslFallback",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.network.crypto.config.*",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.authenticate.enableSaslEncryption",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.network.sasl.serverAlwaysEncrypt",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.core.connection.ack.wait.timeout",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.modify.acls",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.modify.acls.groups",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.ui.filters",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.ui.view.acls",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.ui.view.acls.groups",
    "data": {
      "category": "Security"
    }
  },
  {
    "value": "spark.ssl.enabled",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.[namespace].port",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.enabledAlgorithms",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.keyPassword",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.keyStore",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.keyStorePassword",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.keyStoreType",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.protocol",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.needClientAuth",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.trustStore",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.trustStorePassword",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.ssl.trustStoreType",
    "data": {
      "category": "TLS / SSL"
    }
  },
  {
    "value": "spark.streaming.backpressure.enabled",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.backpressure.initialRate",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.blockInterval",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.receiver.maxRate",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.receiver.writeAheadLog.enable",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.unpersist",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.stopGracefullyOnShutdown",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.kafka.maxRatePerPartition",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.kafka.maxRetries",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.ui.retainedBatches",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.driver.writeAheadLog.closeFileAfterWrite",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.streaming.receiver.writeAheadLog.closeFileAfterWrite",
    "data": {
      "category": "Spark Streaming "
    }
  },
  {
    "value": "spark.r.numRBackendThreads",
    "data": {
      "category": "SparkR"
    }
  },
  {
    "value": "spark.r.command",
    "data": {
      "category": "SparkR"
    }
  },
  {
    "value": "spark.r.driver.command",
    "data": {
      "category": "SparkR"
    }
  },
  {
    "value": "spark.r.shell.command",
    "data": {
      "category": "SparkR"
    }
  },
  {
    "value": "spark.r.backendConnectionTimeout",
    "data": {
      "category": "SparkR"
    }
  },
  {
    "value": "spark.r.heartBeatInterval",
    "data": {
      "category": "SparkR"
    }
  },
  {
    "value": "spark.graphx.pregel.checkpointInterval",
    "data": {
      "category": "GraphX"
    }
  },
  {
    "value": "spark.deploy.recoveryMode",
    "data": {
      "category": "Deploy"
    }
  },
  {
    "value": "spark.deploy.zookeeper.url",
    "data": {
      "category": "Deploy"
    }
  },
  {
    "value": "spark.deploy.zookeeper.dir",
    "data": {
      "category": "Deploy"
    }
  },
  {
    "value": "spark.yarn.am.memory",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.cores",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.waitTime",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.submit.file.replication",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.stagingDir",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.preserve.staging.files",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.scheduler.heartbeat.interval-ms",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.scheduler.initial-allocation.interval",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.max.executor.failures",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.historyServer.address",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.dist.archives",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.dist.files",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.dist.jars",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.executor.instances",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.executor.memoryOverhead",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.driver.memoryOverhead",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.memoryOverhead",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.port",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.queue",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.jars",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.archive",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.access.hadoopFileSystems",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.appMasterEnv.[EnvironmentVariableName]",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.containerLauncherMaxThreads",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.extraJavaOptions",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.extraLibraryPath",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.maxAppAttempts",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.attemptFailuresValidityInterval",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.executor.failuresValidityInterval",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.submit.waitAppCompletion",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.am.nodeLabelExpression",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.executor.nodeLabelExpression",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.tags",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.keytab",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.principal",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.config.gatewayPath",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.config.replacementPath",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.security.credentials.${service}.enabled",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.rolledLog.includePattern",
    "data": {
      "category": "Yarn"
    }
  },
  {
    "value": "spark.yarn.rolledLog.excludePattern",
    "data": {
      "category": "Yarn"
    }
  }
]